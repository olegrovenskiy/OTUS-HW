@page "/dc_download"
@using System.Threading.Tasks;
@inject IWebHostEnvironment Environment
@inject SiteDataService objDataService
@inject DcFileService objFileService
@inject DcUnitService objUnitService
@inject DcChassisService objChassisService
@inject DcInitialDetailRecordService objInitialDetailRecordService
@inject DcEntityService objEntityService
@inject DcModuleService objModuleService
@inject DcCardService objCardService
@inject IWebHostEnvironment Environment
@using TspuWebPortal.Model
@using TspuWebPortal.ORM
@using TspuWebPortal.Shared


<h3>Генерация файла ведомости</h3>

<button class="btn btn-primary" @onclick="StartGenerationProcedure">Начать генерацию</button>
<p></p>
@if (IsFileGenerationStarted)
{
    <p>Данные по всем стойкам загружены.</p>
    <p>----------------------------------</p>

}



@code 
{
    bool IsFileGenerationStarted = false;
    List<RackData> AllRacksInDc = new List<RackData>();
    List<UnitData> AllUnitsInRack = new List<UnitData>();
    //List<string> AllChassisInRack = new List<string>();
    List<OuterChassisData> OutputVedomostList = new List<OuterChassisData>();
    List<OuterChassisData> SortedVedomostList = new List<OuterChassisData>();
    List<InnerChassisData> InnerDetailList = new List<InnerChassisData>();
    List<ModuleData> AllModulesInChassis = new List<ModuleData>();
    List<CardData> AllCardsInChassis = new List<CardData>();
    ChassisData? UsedChassis;
    InitialDetailRecordData? UsedInitialRecord;
    InitialDetailRecordData? UsedInternalDetailRecord;
    //EntityModelData CurrentModel;
    int CurrentChassisId;
    int CurrentInitialRecordId;
    int CurrentChassisNumber = 0;
    int CurrentDetailInChassisNumber = 0;
    int CurrentRackId;
    string CurrentRackNumber;

    void StartGenerationProcedure()
    {
        //string FilePath = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads", $"OutputVedomost.xlsx");
        string FilePath = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads", $"OutputVedomost_{DateTime.Now.ToLongDateString()}.xlsx");
        
        /*
        AllRacksInDc = objUnitService.GetAllRacksInDc("ЦОД-1");   //Получение списка всех стоек в цоде.
        foreach (RackData UsedRack in AllRacksInDc)
        {
            CurrentRackId = UsedRack.RackId;
            CurrentRackNumber = UsedRack.RackNameAsbi;
        }
        */

        AllUnitsInRack = objUnitService.ListAllUnitsInRack(18);     //RackId = 18 - захардкожено для тестов. ЦОД-1, стойка 1.
        foreach (UnitData CurrentUnit in AllUnitsInRack)
        {
            if ((CurrentUnit.ChassisId != null) && (CurrentUnit.IsChassisLowerUnit == true))
            {
                //Console.WriteLine(DateTime.Today);
                //DateTime someDate = new DateTime(now);
                CurrentChassisId = CurrentUnit.ChassisId ?? default(int);
                UsedChassis = objChassisService.GetChassisDataInfoById(CurrentChassisId);
                CurrentInitialRecordId = UsedChassis.InitialDetailRecordId;
                UsedInitialRecord = objInitialDetailRecordService.GetDetailRecordDataInfoById(CurrentInitialRecordId);
                //AllChassisInRack.Add(UsedInitialRecord.DetailOfficialName);
                //CurrentModel = objEntityService.GetEntityModelInfoById((int)UsedInitialRecord.EntityModelId);
                //Загрузка всех Entity Models, присутствующих в стойке
                CurrentChassisNumber++;

                //Проход по модулям внутри шасси
                AllModulesInChassis = objModuleService.ListAllModulesOnChassis(CurrentChassisId);
                foreach (ModuleData UsedModule in AllModulesInChassis)
                {
                    CurrentDetailInChassisNumber++;
                    CurrentInitialRecordId = UsedModule.InitialDetailRecordId;
                    UsedInternalDetailRecord = objInitialDetailRecordService.GetDetailRecordDataInfoById(CurrentInitialRecordId);
                    InnerDetailList.Add(new InnerChassisData
                        {
                            SerialNumber = UsedInternalDetailRecord?.SerialNumber ?? "",
                            Description = UsedInternalDetailRecord?.DetailOfficialName ?? "",
                            Type = "Модуль", 
                            FactoryNumber = UsedInternalDetailRecord?.EntityModel?.PartNumber ?? "",
                            InventoryNumber = UsedInternalDetailRecord?.InventoryNumber ?? "",
                            Comments = UsedModule.Comments,
                            DefinitionType = UsedInternalDetailRecord?.EntityModel?.SnDefinitionType ?? "",
                            Year = UsedInternalDetailRecord?.DeliveryYear ?? 0,
                            PositionInUpperEntity = UsedModule.PositionInUpperEntity,
                            QuantityCount = UsedInternalDetailRecord.IsVisibleInExcel ? 1 : 0 
                        });
                }

                //Проход по картам внутри шасси
                AllCardsInChassis = objCardService.ListAllCardsOnChassis(CurrentChassisId);
                foreach (CardData UsedCard in AllCardsInChassis)
                {
                    CurrentDetailInChassisNumber++;
                    CurrentInitialRecordId = UsedCard.InitialDetailRecordId;
                    UsedInternalDetailRecord = objInitialDetailRecordService.GetDetailRecordDataInfoById(CurrentInitialRecordId);
                    InnerDetailList.Add(new InnerChassisData
                        {
                            SerialNumber = UsedInternalDetailRecord?.SerialNumber ?? "",
                            Description = UsedInternalDetailRecord?.DetailOfficialName ?? "",
                            Type = "Карта", 
                            FactoryNumber = UsedInternalDetailRecord?.EntityModel?.PartNumber ?? "",
                            InventoryNumber = UsedInternalDetailRecord?.InventoryNumber ?? "",
                            Comments = UsedCard.Comments,
                            DefinitionType = UsedInternalDetailRecord?.EntityModel?.SnDefinitionType ?? "",
                            Year = UsedInternalDetailRecord?.DeliveryYear ?? 0,
                            PositionInUpperEntity = UsedCard.PositionInUpperEntity,
                            QuantityCount = UsedInternalDetailRecord.IsVisibleInExcel ? 1 : 0 
                        });
                }

                Console.WriteLine($"Шасси: {UsedInitialRecord?.DetailOfficialName}");
                OutputVedomostList.Add(new OuterChassisData
                    {
                        SerialNumber = UsedInitialRecord?.SerialNumber ?? "",
                        //DefinitionType = CurrentUnit.Chassis.SnType ?? "не задано",
                        DefinitionType = UsedInitialRecord?.EntityModel?.SnDefinitionType ?? "не назначено",
                        Description = UsedInitialRecord?.DetailOfficialName ?? "не назначено",
                        LowerUnit = CurrentUnit.UnitInRack ?? 0, 
                        Rack = CurrentUnit?.Rack?.RackNameAsbi ?? "не назначено",
                        RowName = CurrentUnit?.Rack?.Row?.RowNameDataCenter ?? "не назначено",
                        RoomName = CurrentUnit?.Rack?.Row?.Room?.RoomName ?? "не назначено",
                        DataCenter = CurrentUnit?.Rack?.Row?.Room?.DataCenter?.DataCenterName ?? "не назначено",
                        ChassisHeight = UsedInitialRecord?.EntityModel?.ChassisHeightInUnits ?? 1,
                        Comments = UsedChassis.Comments,
                        Type = "Шасси",
                        InventoryNumber = UsedInitialRecord?.InventoryNumber  ?? "не назначено",
                        FactoryNumber = UsedInitialRecord?.EntityModel?.PartNumber ?? "не задано",
                        Hostname = CurrentUnit?.Chassis?.Hostname ?? "не задано",
                        Year = UsedInitialRecord?.DeliveryYear ?? 0,
                        InnerChassisDataList = new List<InnerChassisData>(InnerDetailList),
                    });
                    InnerDetailList.Clear();
            }
        }

        SortedVedomostList = (from item in OutputVedomostList orderby item.LowerUnit select item).ToList();
        ParseVedomost.GenerateVedomost(SortedVedomostList, FilePath);
        IsFileGenerationStarted = true;
    }

}
