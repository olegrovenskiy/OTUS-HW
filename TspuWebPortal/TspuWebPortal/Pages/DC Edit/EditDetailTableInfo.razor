@page "/detailtable_navigation/{ID:int}"
@inject SiteDataService objDataService
@inject DcFileService objFileService
@inject DcDetailTableService objDetailTableService
@inject DcDetailRecordService objDetailRecordService
@inject DcEntityService objEntityService
@inject DcOperationService objOperationService
@inject DcChassisService objChassisService
@inject DcCardService objCardService
@inject DcModuleService objModuleService
@inject DcCableService objCableService
@inject DcSiteService objSiteService
@inject DcUnitService objUnitService
@using System.Diagnostics
@using TspuWebPortal.Model
@using TspuWebPortal.ORM
@using TspuWebPortal.Shared
@using TspuWebPortal.Scripts
@inherits OwningComponentBase<SiteDataService>
@using static TspuWebPortal.Model.ComponentEnums

<h3>Площадка @ChosenDetailTable.InitialDetailTableId. Редактирование таблицы деталей.</h3>

<EditForm Model=@ChosenDetailTable OnSubmit=@FormSubmitted>
  <div class="row">
    <div class = "col-4">
        <label for="RoomCoordinates">Название файла</label>
        <InputSelect id="DataCenter" @bind-Value="FileId" class="form-control">
            <option value=null>Надо выбрать</option>

            @if (ChosenDetailTable.TableFile != null) {<option value="@ChosenDetailTable.FileId">@ChosenDetailTable.TableFile?.FileName</option>}
            @foreach (var item in DcFileList)                                   //здесь надо добавить проверку, что не выбрана подсказка
            {
                <option value="@item.FileId">@item.FileName</option>
            }
        </InputSelect>
    </div>
    <div class = "col-4">
        <label for="ContractName">Номер Договора</label>
        <InputText @bind-Value=ContractName class="form-control" id="ContractName" />
    </div>
  </div>
  <br>
<input type="submit" class="btn btn-primary" value="Сохранить"/>
</EditForm>
<p>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>
<p></p>
@if (ChosenDetailTable.TableFile != null)
{
    <p>Работаем с файлом @ChosenDetailTable.TableFile?.FileName</p>
    <p>
        <label>
            <button class="btn btn-primary" @onclick="StartParseScript">Начать обработку</button>
        </label>
    </p>
}


@if (IsFileParsed)
{
    <p>Успешно считаны данные по @AllVedomostList.Count позициям.</p>
    <p>Номер договора: @ContractName.</p>
    <p>
        <label>
            <button class="btn btn-primary" @onclick="StartCreateInitialRecords">Начать перенос данных в первичную таблицу</button>
            @if (StartedCreateInitialRecord)
            {
                <p></p>
                <p>Записи добавлены в соответствующие таблицы.</p>
            }

        </label>
    </p>


}



@code {
    [Parameter]
    public int ID { get; set; }

    DetailTableData ChosenDetailTable = new DetailTableData ();
    List<FileData> DcFileList = new List<FileData>();
    FileData UpdatedFile = new FileData();
    List<VedomostData> AllVedomostList = new List<VedomostData>();
    //List<EntityModelData> AllEntities = new List<EntityModelData>();
    List<DetailRecordData> SingleRecord = new List<DetailRecordData>();
    List<string> LogEntityData = new List<string>();
    bool IsFileParsed = false;
    bool IsDataSourceChosen = false;
    bool StartedCreateInitialRecord = false;
    string DataSource = "";
    string ContractName = "";
    //EntityModelData? UsedModel;
    SpecDetailData? UsedSpecaRecord;
    DetailRecordData? UsedDetailRecord;
    OperationSummaryData? UsedGlobalOperation;
    DetailOperationData? UsedDetailOperation;
    int CurrentChassisId = 0;
    int CurrentCardId = 0;
    ChassisData? ChassisObject;
    CardData? CardObject;
    ModuleData? ModuleObject;
    CableData? CableObject;
    DcData? CurrentDc;
    RowData? CurrentRow;
    UnitData? UsedUnitObject;
    private int _FileId;
    bool IsOnFront = true;
    int HydraNumber = 0;

    string TempString = "";
    string[]? SlotNumbers;
    int FirstOccupiedSlot = 0;
    int LastOccupiedSlot = 0;
    string FirstOccupiedSlotString = "";
    string LastOccupiedSlotString = "";

    public int FileId { get => _FileId;
        set { _FileId = value; UpdatedFile = objFileService.GetFileDataInfoById(value); ChosenDetailTable.FileId = value; UpdatedFile.IsAppliedToTable = true; objFileService.UpdateFileInfo(UpdatedFile); } }







    protected override async Task OnInitializedAsync()
    {
        DcFileList = await Task.Run(() => objFileService.ListFilesOfSpecificCategory());
        ChosenDetailTable = await Task.Run(() => objDetailTableService.GetDetailTableDataInfoById(Convert.ToInt32(ID)));
    }

    void FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();
        if (formIsValid)
        {
            objDetailTableService.UpdateDetailTableInfo(ChosenDetailTable);
        }
    }

    void StartParseScript()
    {
        AllVedomostList = ParseVedomost.GetAllRecords(ChosenDetailTable?.TableFile?.FilePath);          //Убрать возможность нуля.
        ChosenDetailTable.RegisterDate = DateOnly.FromDateTime(DateTime.Now);
        IsFileParsed = true;
        return;
    }

    void StartCreateInitialRecords()
    {
        foreach (VedomostData SingleVedomostRecord in AllVedomostList)
        {
            // Проход по всему считанному из ведомости.

            // Получение и модели и записи в спеке

            UsedSpecaRecord = objEntityService.FindOrCreateSpecaRecordFromExcel(SingleVedomostRecord);
            //UsedModel = objEntityService.FindOrCreateEntityModelFromExcel(SingleVedomostRecord);            //добавить логирование операции
            
            //Создаём деталь
            UsedDetailRecord = new DetailRecordData
                        {
                            SpecDetailId = UsedSpecaRecord.SpecDetailId,
                            DetailOrigin = 0,
                            InitialDetailTableId = ChosenDetailTable.InitialDetailTableId,
                            SerialNumber = SingleVedomostRecord.SerialNumber,
                            InventoryNumber = SingleVedomostRecord.InventoryNumber ?? "не применимо",
                            Location = SingleVedomostRecord.DataCenter,
                            IsSplittable = false,
                            //GlobalOperationId = UsedGlobalOperation.GlobalOperationId,
                            IsVisibleInExcel = SingleVedomostRecord.Quantity == 1 ? true : false,
                            IsExcludedFromPrint = false
                            //DetailOfficialName = SingleVedomostRecord.FullDetailName,
                            //Quantity = SingleVedomostRecord.Quantity,
                            //Category = UsedModel.ModelType,
                            //EntityModelId = UsedModel.EntityModelId,
                            //DeliveryYear = SingleVedomostRecord.Year
                        };
            objDetailRecordService.CreateDetailRecordModel (UsedDetailRecord);

            //Создаём глобальную операцию
            UsedGlobalOperation = new OperationSummaryData { OperationType = "Работа с деталью", OperationDate = DateOnly.FromDateTime(DateTime.Now) };
            objOperationService.CreateSummaryOperation(UsedGlobalOperation);

            //Создаём частную операцию добавления детали
            UsedDetailOperation = new DetailOperationData { OperationSubtype = "Добавление детали", DetailRecordId = UsedDetailRecord.DetailRecordId, GlobalOperationId = UsedGlobalOperation.GlobalOperationId };
            objOperationService.CreateDetailOperation(UsedDetailOperation);

            if (UsedSpecaRecord.EntityModel.ModelType == "Шасси")
            {

                /**/
                //  Добавляем объект в списке шасси.
                //Добавляем запись о занятых шасси слотах в таблицу слотов
                if (SingleVedomostRecord.Place.IndexOf("(r)") > -1)
                {
                    TempString = SingleVedomostRecord.Place.Replace(" (r)", "");
                    IsOnFront = false;

                }
                else { IsOnFront = true; TempString = SingleVedomostRecord.Place; }




                if (TempString.IndexOf("юниты ") > -1)
                {
                    TempString = TempString.Replace("юниты ", "");
                    SlotNumbers = TempString.Split('-');
                    FirstOccupiedSlot = Convert.ToInt32(SlotNumbers[0]);
                    LastOccupiedSlot = Convert.ToInt32(SlotNumbers[1]);
                }
                else
                {
                    TempString = TempString.Replace("юнит ", "").Trim();
                    FirstOccupiedSlot = Convert.ToInt32(TempString);
                    LastOccupiedSlot = FirstOccupiedSlot;
                }
                UsedSpecaRecord.EntityModel.ChassisHeightInUnits = LastOccupiedSlot - FirstOccupiedSlot + 1;          //Записать изменения в БД.
                objEntityService.UpdateEntityModelInfo(UsedSpecaRecord.EntityModel);
                ChassisObject = new ChassisData
                        {
                            //IsInstalled = true,
                            ChassisStatus = "в работе",
                            InitialDetailRecordId = UsedDetailRecord.DetailRecordId,
                            Hostname = SingleVedomostRecord.AsbiHostname,
                            Comments = SingleVedomostRecord.Comments ?? "пусто"
                        };
                objChassisService.CreateChassisModel(ChassisObject);
                CurrentChassisId = ChassisObject.ChassisId;

                //Найти объект стойки по вводным: имя цода (из ведомости), имя помещения (постоянное), имя ряда (из формулы поиска ряда по номеру стойки), номер стойки (из ведомости).
                CurrentDc = objSiteService.GetDcInfoByName(SingleVedomostRecord.DataCenter);
                for (int CurrentUnitInRack = FirstOccupiedSlot; CurrentUnitInRack <= LastOccupiedSlot; CurrentUnitInRack++)
                {
                    UsedUnitObject = objUnitService.GetUnitByVedomostData
                        (SingleVedomostRecord.DataCenter, SingleVedomostRecord.RoomName, SingleVedomostRecord.RowName, SingleVedomostRecord.Rack, CurrentUnitInRack, IsOnFront);
                    UsedUnitObject.Chassis = ChassisObject;
                    if (CurrentUnitInRack == FirstOccupiedSlot) UsedUnitObject.IsChassisLowerUnit = true;
                }

                UsedDetailRecord.IsSuccessfullyUploaded = true;

            }
            else if (UsedSpecaRecord.EntityModel.ModelType == "Плата")
            {
                //  Добавляем объект в списке плат.
                CardObject = new CardData
                    {
                          IsInstalled = true,
                          InitialDetailRecordId = UsedDetailRecord.DetailRecordId,
                          Comments = SingleVedomostRecord.Comments  ?? "пусто",
                          ChassisId = CurrentChassisId,
                          PositionInUpperEntity = SingleVedomostRecord.Place ?? "пусто"
                    };
                objCardService.CreateCardModel(CardObject);
                CurrentCardId = CardObject.CardId;
                UsedDetailRecord.IsSuccessfullyUploaded = true;
            }
            else
            {
                //  Добавляем объект в списке модулей.
                if (UsedSpecaRecord.EntityModel.ModelType == "Кабель")
                {
                    if (SingleVedomostRecord.Quantity == 1) HydraNumber = 1;
                    else HydraNumber = 2;
                }
                else HydraNumber = 0;
                ModuleObject = new ModuleData
                    {
                          IsInstalled = true,
                          InitialDetailRecordId = UsedDetailRecord.DetailRecordId,
                          Comments = SingleVedomostRecord.Comments ?? "пусто",
                          ChassisId = CurrentChassisId,
                          PositionInUpperEntity = SingleVedomostRecord.Place ?? "пусто",
                          HydraEndNumber = HydraNumber
                    };
                objModuleService.CreateModuleModel(ModuleObject);
                UsedDetailRecord.IsSuccessfullyUploaded = true;
            }
            if (UsedSpecaRecord.EntityModel.ModelType == "Кабель")
            {
                //  Добавляем объект в списке кабелей.
                 CableObject = new CableData
                    {
                          IsInstalled = true,
                          InitialDetailRecordId = UsedDetailRecord.DetailRecordId,
                          Comments = SingleVedomostRecord.Comments  ?? "пусто",
                    };
                objCableService.CreateCableModel(CableObject);
            }
        };

        StartedCreateInitialRecord = true;
        return;
    }




        //UpdatedFile = objFileService.GetFileDataInfoById(ChosenDetailTable.FileId);
        // <option value="@ChosenDetailTable.FileId">@ChosenDetailTable.TableFile?.FileName</option>

        //1. Для записи файла установить в true переменную IsApplied...
        //2. Для записи таблицы вместе с добавлением переменной файла добавить дату регистрации.
        //3. Добавить публикацию имени/пути файла.

        //FileInfoAppendedToDetailTable
        //UpdateEntityModelInfo
        //Убрать двойное появление названия файла в списке выборки.
        //public int DcId { get => _DcId;  set { _DcId = value; DcRoomPartialList = objDataService.ListRoomsOnSpecificDataCenter(value); } }



    /*
     * 
     * 
     * 
     * 
    public class ChassisData
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int ChassisId { get; set; }
        public string? SnType { get; set; } = string.Empty;
        public string? ChassisStatus { get; set; } = string.Empty;
        public string? SerialNumber { get; set; } = string.Empty;
        public int? EntityModelId { get; set; }
        public string? Hostname { get; set; } = string.Empty;
        public string? CurrentLocation { get; set; } = string.Empty;
        public bool? IsInstalled { get; set; }
        public int? InitialDetailRecordId { get; set; }
        public int? DetailChangeId { get; set; }
        public string? InventoryNumber { get; set; } = string.Empty;
        public int? DeliveryYear { get; set; }
        public string? Comments { get; set; } = string.Empty;
        public string? Location { get; set; } = string.Empty;

        [ForeignKey("EntityModelId")]
        public EntityModelData? EntityModel { get; set; }
        public List<UnitData>? Units { get; set; }
        public List<CardData>? Cards { get; set; }
        public List<ModuleData>? Modules { get; set; }

        [ForeignKey("DetailChangeId")]
        public ChangeApplicationData? DetailChange { get; set; }

        [ForeignKey("InitialDetailRecordId")]
        public InitialDetailRecordData? InitialDetailRecord { get; set; }
    }
     * 
     *     
    public void CreateDetailRecordModel(InitialDetailRecordData objDetailRecordModel)
    {
        _db.DetailRecord?.Add(objDetailRecordModel);
        _db.SaveChanges();
        return;
    }


    public void CreateOperationModel(OperationData objOperation)
    {
        _db.Operations?.Add(objOperation);
        _db.SaveChanges();
        return;
    }


     * 
     * 
     * 
     * 
     * 
     * 
     * 
     *  public EntityModelData FindOrCreateEntityModelFromExcel(VedomostData ExcelObject)
        {
            EntityModelData? EntityModelInfo = _db.EntityModel?.FirstOrDefault(s => s.ModelName == ExcelObject.Description);
            if (EntityModelInfo == null)
            {
                EntityModelData NewEntityModel = new EntityModelData { ModelName = ExcelObject.Description, ModelType = "chassis" };
                return NewEntityModel;
            }
            else return EntityModelInfo;
        }

------------------------------------------------------------------------------------------------------------------------

     @if (IsFileParsed)
{
    <table class="table">
        <thead>
            <tr>
                <th>Серийный номер</th>
                <th>Номер п/п</th>
                <th>ЦОД</th>
                <th>Расположение</th>
            </tr>
        </thead>
        <tbody>
            @foreach (VedomostData CurrentRow in AllVedomostList)
            { 
                    <tr>
                    <td>@CurrentRow.SerialNumber</td>
                    <td>@CurrentRow.ItemNumber</td>
                    <td>@CurrentRow.DataCenter</td>
                    <td>@CurrentRow.Place</td>
                    </tr>
            }
        </tbody>
    </table>    
}
     * 

     <EditForm Model=@ChosenDetailTable OnSubmit=@FormSubmitted>
  <div class="row">
    <div class = "col-4">
        <label for="RoomCoordinates">Название файла</label>
        <InputSelect id="DataCenter" @bind-Value="FileId" class="form-control">
            <option value=null>Надо выбрать</option>

            @if (ChosenDetailTable.TableFile != null) {<option value="@ChosenDetailTable.FileId">@ChosenDetailTable.TableFile?.FileName</option>}
            @foreach (var item in DcFileList)                                   //здесь надо добавить проверку, что не выбрана подсказка
            {
                <option value="@item.FileId">@item.FileName</option>
            }
        </InputSelect>
    </div>
    <div class = "col-4">
        <label for="EntityModelModelName">Ответственный/контракт</label>
        <InputText @bind-Value=ChosenEntityModel.ModelName class="form-control" id="ModelName" />
    </div>
  </div>
  <br>
<input type="submit" class="btn btn-primary" value="Сохранить"/>
</EditForm>



@if (IsFileParsed)
{
    <p>Успешно считаны данные по @AllVedomostList.Count позициям.</p>
    <p>Заполняем данные по поставке.</p>

  <EditForm Model=@ChosenDetailTable OnSubmit=@ChooseDataSource>
  <div class="row">
    <div class = "col-4">
        <label for="RoomCoordinates">Название файла</label>
        <InputRadioGroup @bind-Value="DataSource">
        <br>
        @foreach (var item in (Submitter[])Enum
            .GetValues(typeof(Submitter)))
        {
            <InputRadio Value="@item" />
            <text>&nbsp;</text>@item<br>
        }
        </InputRadioGroup>
    </div>
  </div>
  <br>
<input type="submit" class="btn btn-primary" value="Сохранить"/>
</EditForm>
<p>Источник: @DataSource</p>
<p>Флаг: @IsDataSourceChosen</p>

                @foreach (VedomostData SingleVedomostRecord in AllVedomostList)
                {
                    <p>
                        @SingleVedomostRecord.ItemNumber @objEntityService.FindOrCreateEntityModelFromExcel(SingleVedomostRecord).ModelName
                    </p>
                }

}





     */




}